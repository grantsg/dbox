/*
 * ItemGUI2.java
 *
 * Created on July 29, 2007, 5:43 PM
 *
 * @author  Truben
 */

package dbox2.GUI;

import dbox2.*;
import dbox2.util.FileChooserFilter;
import dbox2.util.helperClass;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.Arrays;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageInputStream;
import javax.swing.*;
import nl.ikarus.nxt.priv.imageio.icoreader.obj.ICOFile;
import nl.ikarus.nxt.priv.imageio.icoreader.obj.IconEntry;

public class ItemGUI extends javax.swing.JDialog {
    
    private DosItem dos;
    private MainWindow g;
    
    public ItemGUI(MainWindow parent) {
        dos = new DosItem();
        g = parent;
        setModal(true);
        initComponents();
        cmbGenre.setModel(new javax.swing.DefaultComboBoxModel(Main.pref.getGenres()));
        cmbGenre.setSelectedItem(dos.getGenre());
        centerScreen();
    }
    
    public ItemGUI(DosItem di, MainWindow parent) {
        dos = di;
        initComponents();
        cmbGenre.setModel(new javax.swing.DefaultComboBoxModel(Main.pref.getGenres()));
        centerScreen();
        
        setModal(true);

        g = parent;
        appName.setText(dos.getName());
        appExec.setText(dos.getGame());
        appPath.setText(dos.getPath());
        appSetup.setText(dos.getInstaller());
        appIcon.setText(dos.getIcon());
        appCD.setText(dos.getCdrom());
        sldCycles.setValue(dos.getCycles());
        appFrameSkip.setValue(dos.getFrameskip());
        chkFavorite.setSelected(dos.isStar());
        cmbGenre.setSelectedItem(dos.getGenre());
        txtKeywords.setText(dos.getKeywords());

        if(!dos.getExtra().equals("")) {
            String[] s = dos.getExtra().substring(0, dos.getExtra().length()-1).split(";");
            JList lm = new JList(s);
            listProperties.setModel(lm.getModel());
        }
    }
    
    /**
     * Putter boksen midt paa skjermen
     */
    public void centerScreen() {
    	  Dimension dim = getToolkit().getScreenSize();
    	  Rectangle abounds = getBounds();
    	  setLocation((dim.width - abounds.width) / 2,
    	      (dim.height - abounds.height) / 2);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdWizard = new javax.swing.JButton();
        cmdConfirm = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel(){
            ImageIcon backImage = new javax.swing.ImageIcon(Main.theme.getBackgroundImage());
            Image image = backImage.getImage();
            int w = backImage.getIconWidth();

            public void paintComponent (Graphics g) {
                for(int i=0;i<Main.theme.getBackgroundRepeat();i++)
                g.drawImage(image, w*i, 0, this);
                super.paintComponent(g);
            }
        }
        ;
        jLabel5 = new javax.swing.JLabel();
        Icon = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        appName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        appExec = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        appIcon = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        sldCycles = new javax.swing.JSlider();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        appSetup = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        appPath = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        appCD = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        appFrameSkip = new javax.swing.JSpinner();
        jButton5 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cmbGenre = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        chkFavorite = new javax.swing.JCheckBox();
        txtKeywords = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listProperties = new javax.swing.JList();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setResizable(false);

        cmdWizard.setText("Wizard");
        cmdWizard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdWizardActionPerformed(evt);
            }
        });

        cmdConfirm.setText("OK");
        cmdConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdConfirmActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setOpaque(false);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 2, 18));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Edit Game");

        Icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dbox2/gameIcons/application-x-executable.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 486, Short.MAX_VALUE)
                .add(Icon)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Icon)
                    .add(jLabel5))
                .add(14, 14, 14))
        );

        jPanel2.setOpaque(false);

        jLabel1.setText("Name");

        appName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appNameActionPerformed(evt);
            }
        });

        jLabel3.setText("Executable");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dbox2/img/folder.png"))); // NOI18N
        jButton1.setToolTipText("Browse...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel8.setText("Icon");

        appIcon.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                appIconCaretUpdate(evt);
            }
        });
        appIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appIconActionPerformed(evt);
            }
        });
        appIcon.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                appIconCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        appIcon.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                appIconPropertyChange(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dbox2/img/folder.png"))); // NOI18N
        jButton4.setToolTipText("Browse...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setText("How fast would you like the computer?");
        jLabel6.setToolTipText("How fast should the emulated\ncomputer be? If you draw the slider\nto the left, it will be slower, and to\nthe right it will be faster");

        sldCycles.setMaximum(15000);
        sldCycles.setMinimum(1);
        sldCycles.setToolTipText("3000 CPU Cycles");
        sldCycles.setValue(3000);
        sldCycles.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldCyclesStateChanged(evt);
            }
        });
        sldCycles.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sldCyclesPropertyChange(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, appName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                    .add(jLabel1)
                    .add(jLabel3)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(appExec, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(appIcon, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton4))
                    .add(jLabel8)
                    .add(jLabel6)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, sldCycles, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(appName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(appExec, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(appIcon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton4))
                .add(18, 18, 18)
                .add(jLabel6)
                .add(sldCycles, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(588, 588, 588))
        );

        jTabbedPane1.addTab("General", jPanel2);

        jPanel3.setOpaque(false);

        jLabel4.setText("Setup");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dbox2/img/folder.png"))); // NOI18N
        jButton2.setToolTipText("Browse...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Path");

        jLabel7.setText("CD ROM Directory");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dbox2/img/folder.png"))); // NOI18N
        jButton3.setToolTipText("Browse...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel9.setText("How many frames DOSBox skips before drawing one: ");
        jLabel9.setToolTipText("Frameskip");

        appFrameSkip.setModel(new javax.swing.SpinnerNumberModel(0, 0, 9, 1));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dbox2/img/format-text-bold.png"))); // NOI18N
        jButton5.setToolTipText("Set CD-ROM label");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(appPath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                    .add(jLabel2)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel4)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, appSetup, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE))
                        .add(6, 6, 6)
                        .add(jButton2))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(appCD, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 445, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jLabel7)
                                .add(431, 431, 431)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel9)
                        .add(260, 260, 260)
                        .add(appFrameSkip, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(appPath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(appSetup, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jButton2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(appCD, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jButton3)
                    .add(jButton5))
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(appFrameSkip, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9))
                .addContainerGap(110, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Advanced", jPanel3);

        jPanel4.setOpaque(false);

        jLabel10.setLabelFor(cmbGenre);
        jLabel10.setText("Genre");

        jLabel11.setLabelFor(txtKeywords);
        jLabel11.setText("Keywords (separate by spaces)");

        chkFavorite.setText("Mark as favorite");

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dbox2/img/emblem-favorite.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(chkFavorite)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel12))
                    .add(jLabel10)
                    .add(cmbGenre, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 165, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, txtKeywords, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                    .add(jLabel11))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel10)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmbGenre, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel11)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtKeywords, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(chkFavorite)
                    .add(jLabel12))
                .addContainerGap(162, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Meta Information", jPanel4);

        jPanel5.setOpaque(false);

        listProperties.setFont(new java.awt.Font("Courier", 0, 12)); // NOI18N
        listProperties.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listProperties.setCellRenderer(new ExpertListRenderer());
        jScrollPane1.setViewportView(listProperties);

        cmdAdd.setText("Add");
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        cmdRemove.setText("Remove");
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        jLabel13.setText("DosBox properties");

        jLabel14.setForeground(new java.awt.Color(51, 51, 255));
        jLabel14.setText("Learn more...");
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel13)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel14)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 371, Short.MAX_VALUE)
                        .add(cmdAdd)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmdRemove)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel13)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmdRemove)
                    .add(cmdAdd)
                    .add(jLabel14))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Expert", jPanel5);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(482, Short.MAX_VALUE)
                .add(cmdWizard)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdConfirm)
                .addContainerGap())
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 339, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmdWizard)
                    .add(cmdConfirm))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void sldCyclesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldCyclesStateChanged
    
    sldCycles.setToolTipText(sldCycles.getValue()+" CPU Cycles");
}//GEN-LAST:event_sldCyclesStateChanged

private void sldCyclesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sldCyclesPropertyChange
    
}//GEN-LAST:event_sldCyclesPropertyChange


private void cmdConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdConfirmActionPerformed
    DosItem d = new DosItem();

    // Set prefrences
    d.setName(appName.getText());
    d.setPath(appPath.getText());
    d.setInstaller(appSetup.getText());
    d.setCycles(sldCycles.getValue());
    d.setCdrom(appCD.getText());
    d.setGame(appExec.getText());
    d.setFrameskip(Integer.parseInt(appFrameSkip.getValue().toString()));
    d.setStar(chkFavorite.isSelected());
    d.setIcon(appIcon.getText());
    d.setKeywords(txtKeywords.getText());
    d.setGenre(cmbGenre.getSelectedItem().toString());
    d.setExtra(stringifyModel(listProperties.getModel()));
    d.setCdromLabel(dos.getCdromLabel());

    MainWindow.bl.addGame(d);
    this.setVisible(false);
}//GEN-LAST:event_cmdConfirmActionPerformed

private String stringifyModel(ListModel lm){
    String output = "";
    for(int i = 0; i < lm.getSize(); i++) {
        output += lm.getElementAt(i) + ";";
    }
    return output;
}

private void cmdWizardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdWizardActionPerformed
    String name = JOptionPane.showInputDialog(this, "Please enter the name of the application", appName.getText());
    if(name == null)
        return;
    appName.setText(name);
    String s = helperClass.showFileChooser(this, "Select file",
            new FileChooserFilter(FileChooserFilter.EXTENSIONS, new String[]{".exe",".com",".bat"},
            "Executable DOS files (*.exe, *.com, *.bat)"), false);;
    if (s != null) {
        int last = 0;
        for(int i = s.length()-1; i >= 0; i--)
            if(s.charAt(i) == File.separatorChar) {
                last = i;
                break;
            }
        
        appPath.setText(s.substring(0,last));
        appExec.setText(s.substring(last+1));

        // Check if setup exists
        File f = new File(appPath.getText() + File.separatorChar +  "setup.exe");
        if(f.exists())
            appSetup.setText("setup.exe");
        f = new File(appPath.getText() + File.separatorChar + "install.exe");
        if(f.exists())
            appSetup.setText("install.exe");
        f = new File(appPath.getText() + File.separatorChar + "setup.com");
        if(f.exists())
            appSetup.setText("setup.com");

        // icons
        f = new File(appPath.getText() + File.separatorChar + appExec.getText() + ".ico");
        if(f.exists())
            appIcon.setText(appExec.getText() + ".ico");
        f = new File(appPath.getText() + File.separatorChar + appName.getText() + ".ico");
        if(f.exists())
            appIcon.setText(appName.getText() + ".ico");
    }
}//GEN-LAST:event_cmdWizardActionPerformed

private void appNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appNameActionPerformed
    
}//GEN-LAST:event_appNameActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    String s;
    if(!appPath.getText().equals(""))
        s = helperClass.showFileChooser(this, "Select file",
            new FileChooserFilter(FileChooserFilter.EXTENSIONS, new String[]{".exe",".com",".bat"},
            "Executable DOS files (*.exe, *.com, *.bat)"), false, appPath.getText());
    else
        s = helperClass.showFileChooser(this, "Select file",
                new FileChooserFilter(FileChooserFilter.EXTENSIONS, new String[]{".exe",".com",".bat"},
                "Executable DOS files (*.exe, *.com, *.bat)"), false);
    
    if (s != null) {
        int last = 0;
        for(int i = s.length()-1; i >= 0; i--)
            if(s.charAt(i) == File.separatorChar) {
                last = i;
                break;
            }
        appPath.setText(s.substring(0,last));
        appExec.setText(s.substring(last+1));
    }
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    String s;
    if(!appPath.getText().equals(""))
        s = helperClass.showFileChooser(this, "Select file",
            new FileChooserFilter(FileChooserFilter.EXTENSIONS, new String[]{".exe",".com",".bat"},
            "Executable DOS files (*.exe, *.com, *.bat)"), false, appPath.getText());
    else
        s = helperClass.showFileChooser(this, "Select file",
                new FileChooserFilter(FileChooserFilter.EXTENSIONS, new String[]{".exe",".com",".bat"},
                "Executable DOS files (*.exe, *.com, *.bat)"), false);
    
    if (s != null) {
        int last = 0;
        for(int i = s.length()-1; i >= 0; i--)
            if(s.charAt(i) == File.separatorChar) {
                last = i;
                break;
            }
        System.out.println(s);
        appSetup.setText(s.substring(last+1));
    }
}//GEN-LAST:event_jButton2ActionPerformed



private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    String s;
    if(appPath.getText().equals(""))
        s = helperClass.showFileChooser(this, "Select directory",
            new FileChooserFilter(FileChooserFilter.DIRECTORIES, null,
            "Directories"), true);
    else
        s = helperClass.showFileChooser(this, "Select directory",
            new FileChooserFilter(FileChooserFilter.DIRECTORIES, null,
            "Directories"), true,appPath.getText());

    if (s != null) {
        appCD.setText(s);
    }
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    String s;
    if(appPath.getText().equals(""))
        s = helperClass.showFileChooser(this, "Select file",
            new FileChooserFilter(FileChooserFilter.EXTENSIONS,
            new String[]{".gif",".ico",".png",".jpg"},
            "Icon files (*.ico, *.gif, *.png, *.jpg)"), false);
    else
        s = helperClass.showFileChooser(this, "Select file",
            new FileChooserFilter(FileChooserFilter.EXTENSIONS,
            new String[]{".gif",".ico",".png",".jpg"},
            "Icon files (*.ico, *.gif, *.png, *.jpg)"), false, appPath.getText());
    
    if (s != null) {
        appIcon.setText(s);
    }
}//GEN-LAST:event_jButton4ActionPerformed

private void appIconPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_appIconPropertyChange
    String ikon = appIcon.getText();
    File fil = new File(ikon);
    ImageIcon ii = new ImageIcon(getClass().getResource("/dbox2/gameIcons/application-x-executable.png"));
    if(fil.exists()) {
        if(ikon.toLowerCase().endsWith("ico")) { // If the file is a ICO file
            try {
                ImageInputStream in = ImageIO.createImageInputStream(new FileInputStream(new File(ikon)));
                ICOFile f;
                f = new ICOFile(in);
                IconEntry ie = f.getEntry(0);
                ii = new ImageIcon(ie.getBitmap().getImage());
            } catch (IOException ex) {
                System.out.println("Error reading icon " + ikon);
            }
        }
        else
            ii = new ImageIcon(ikon);
        
        Icon.setIcon(resizeIcon(ii));
    }
}//GEN-LAST:event_appIconPropertyChange

private void appIconCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_appIconCaretPositionChanged

}//GEN-LAST:event_appIconCaretPositionChanged

private void appIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appIconActionPerformed

}//GEN-LAST:event_appIconActionPerformed

private void appIconCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_appIconCaretUpdate
    appIconPropertyChange(null);
}//GEN-LAST:event_appIconCaretUpdate

private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
    HashMap<String,HashMap<String,String>> values = new HashMap<String,HashMap<String,String>>();
    HashMap<String,String> cpu = new HashMap<String,String>();
    HashMap<String,String> dos = new HashMap<String,String>();
    HashMap<String,String> dosbox = new HashMap<String,String>();
    HashMap<String,String> renderer = new HashMap<String,String>();
    HashMap<String,String> sdl = new HashMap<String,String>();
    HashMap<String,String> ipx = new HashMap<String,String>();
    HashMap<String,String> serial = new HashMap<String,String>();
    
    cpu.put("core", "simple | normal | full | dynamic | auto");
    cpu.put("cputype", "auto | 386 | 386_slow | 486_slow | pentium_slow | 386_prefetch");
    cpu.put("cycles", "[number] | max | auto");
    cpu.put("cycleup", "[number]");
    cpu.put("cycledown", "[number]");
    
    serial.put("serial1", "device [parameter:value]");
    serial.put("serial2", "device [parameter:value]");
    serial.put("serial3", "device [parameter:value]");
    serial.put("serial4", "device [parameter:value]");
    serial.put("serial5", "device [parameter:value]");
    serial.put("serial6", "device [parameter:value]");
    serial.put("serial7", "device [parameter:value]");
    serial.put("serial8", "device [parameter:value]");
    serial.put("serial9", "device [parameter:value]");
    
    ipx.put("ipx", "true | false");
    
    dos.put("xms", "true | false");
    dos.put("ems", "true | false");
    dos.put("umb", "true | false");
    dos.put("keyboardlayout", "auto | none | XY");
    
    renderer.put("frameskip", "[number]");
    renderer.put("aspect", "true | false");
    renderer.put("scaler", "normal2x | normal3x | advmame2x | advmame3x | advinterp2x | advinterp3x | tv2x | tv3x | rgb2x | rgb3x | scan2x | scan3x");
    
    dosbox.put("language", "path-to-language-file");
    dosbox.put("memsize", "[number]");
    dosbox.put("machine", "hercules | cga | tandy | cga | tandy | pcjr | ega | vgaonly | svga_s3 | svga_et3000 | svga_et4000 | svga_paradise | vesa_nolfb | vesa_oldvbe");
    dosbox.put("captures", "path-to-capture-directory");
    
    sdl.put("fullscreen", "true | false");
    sdl.put("fulldouble", "true | false ");
    sdl.put("fullresolution", "width x height | original");
    sdl.put("windowresolution", "width x height | original");
    sdl.put("output", "surface | overlay | opengl | openglnb | ddraw");
    sdl.put("autolock", "true | false");
    sdl.put("sensitivity", "A number from 1 to 1000");
    sdl.put("waitonerror", "true | false");
    sdl.put("priority", "when-focused,when-minimzed");
    sdl.put("mapperfile", "path-to-mapper-file");
    sdl.put("usescancodes", "true | false");

    values.put("AUTOEXEC", null);
    values.put("SDL", sdl);
    values.put("DOSBOX", dosbox);
    values.put("RENDERER", renderer);
    values.put("DOS", dos);
    values.put("IPX", ipx);
    values.put("SERIAL", serial);
    values.put("CPU", cpu);
    values.put("MIXER", new HashMap<String,String>());
    values.put("MIDI", new HashMap<String,String>());
    values.put("SBLASTER", new HashMap<String,String>());
    values.put("GUS", new HashMap<String,String>());
    values.put("SPEAKER", new HashMap<String,String>());
    values.put("JOYSTICK", new HashMap<String,String>());

    int i = 0;
    String[] sections = new String[values.size()];
    for(String s : values.keySet())
        sections[i++] = s;

    Arrays.sort(sections);

    String section = (String) JOptionPane.showInputDialog(this, "Please choose a section: ", "Choose section", JOptionPane.QUESTION_MESSAGE, null, sections, sections[0]);
    if(section == null)
                return;

    if(values.get(section) == null)
        addProperties(section, getString("Enter command"), null);
    else {
        HashMap<String,String> properties = values.get(section);
        if(properties.size() == 0) {
            String name  = getString("Enter attribute name: ");
            if(name == null)
                return;
            String value = getString("Enter attribute value: ");
            if(name == null)
                return;
            addProperties(section, name, value);
        }
        else {
            i = 0;
            String[] propertyArray = new String[properties.size()];
            for(String s : properties.keySet())
                propertyArray[i++] = s;
            Arrays.sort(propertyArray);
            String name = (String) JOptionPane.showInputDialog(this, "Please choose a property: ", "Choose property", JOptionPane.QUESTION_MESSAGE, null, propertyArray, propertyArray[0]);
            String value;
            if(name == null)
                    return;
            if(properties.get(name).equals("true | false")) {
                value = (String) JOptionPane.showInputDialog(this, "Please choose value for " + name + ": ", "Choose property", JOptionPane.QUESTION_MESSAGE, null, new String[]{"true","false"}, "true");
                if(value == null)
                    return;
            }
            else {
                value = getString("Enter property value for " + name + ":\n\nAllowed values:\n" + properties.get(name));
                if(value == null)
                    return;
            }
            addProperties(section, name, value);
            System.out.println(section + " " + " name " + " " + value);
        }
    }
}//GEN-LAST:event_cmdAddActionPerformed

private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
    if(listProperties.getSelectedIndex() == -1)
        return;
    
    ListModel currentModel = listProperties.getModel();
    String[] data = new String[currentModel.getSize()-1];
    int minus = 0;
    for(int i = 0; i < currentModel.getSize(); i++) {
        if(!((String)currentModel.getElementAt(i)).equals(listProperties.getSelectedValue().toString()))
            data[i-minus] = (String) currentModel.getElementAt(i);
        else
            minus = 1;
     }
            
    JList newModel = new JList(data);
    listProperties.setModel(newModel.getModel());
}//GEN-LAST:event_cmdRemoveActionPerformed

private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
    BrowserControl.openUrl("http://www.dosbox.com/wiki/Dosbox.conf");
}//GEN-LAST:event_jLabel14MouseClicked

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    String label = JOptionPane.showInputDialog(this, "Please enter a label for the CD-ROM drive",dos.getCdromLabel());
    if(label != null)
        dos.setCdromLabel(label);
}//GEN-LAST:event_jButton5ActionPerformed

    private void addProperties(String section, String property, String value) {
        ListModel currentModel = listProperties.getModel();
        String[] data = new String[currentModel.getSize()+1];
        for(int i = 0; i < currentModel.getSize(); i++)
            data[i] = (String) currentModel.getElementAt(i);
        
        if(value == null)
            data[data.length-1] = section + " => " + property;
        else
            data[data.length-1] = section + " => " + property + " = " + value;

        Arrays.sort(data);
        JList newModel = new JList(data);
        listProperties.setModel(newModel.getModel());
    }

    private String getString(String msg) {
        return JOptionPane.showInputDialog(msg, "");
    }

     private ImageIcon resizeIcon(ImageIcon icon) {
         if(Main.pref.isIconResize()) {
             int width = 32;
             int height = 32;

             BufferedImage bi = new BufferedImage(width, height,
             BufferedImage.TYPE_INT_ARGB);
             bi.getGraphics().drawImage(icon.getImage(), 0, 0, width, height, null);

             return new ImageIcon(bi);
         }
         else
             return icon;
     }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Icon;
    private javax.swing.JTextField appCD;
    private javax.swing.JTextField appExec;
    private javax.swing.JSpinner appFrameSkip;
    private javax.swing.JTextField appIcon;
    private javax.swing.JTextField appName;
    private javax.swing.JTextField appPath;
    private javax.swing.JTextField appSetup;
    private javax.swing.JCheckBox chkFavorite;
    private javax.swing.JComboBox cmbGenre;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdConfirm;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdWizard;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList listProperties;
    private javax.swing.JSlider sldCycles;
    private javax.swing.JTextField txtKeywords;
    // End of variables declaration//GEN-END:variables

    @Override
    public void dispose() {
        cmdConfirmActionPerformed(null);
    }


}